'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ESC = exports.BS = exports.OTHER = exports.DOWN = exports.UP = exports.ENTER = undefined;

var _utils = require('./utils');

var _events = require('events');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ENTER = exports.ENTER = 0;
var UP = exports.UP = 1;
var DOWN = exports.DOWN = 2;
var OTHER = exports.OTHER = 3;
var BS = exports.BS = 4;
var ESC = exports.ESC = 5;

/**
 * @event Editor#move
 * @type {CustomEvent}
 * @prop {function} preventDefault
 * @prop {object} detail
 * @prop {number} detail.code
 */

/**
 * @event Editor#enter
 * @type {CustomEvent}
 * @prop {function} preventDefault
 */

/**
 * @event Editor#esc
 * @type {CustomEvent}
 * @prop {function} preventDefault
 */

/**
 * @event Editor#change
 * @type {CustomEvent}
 * @prop {object} detail
 * @prop {string} detail.beforeCursor
 */

/**
 * Abstract class representing a editor target.
 *
 * Editor classes must implement `#applySearchResult`, `#getCursorOffset`,
 * `#getBeforeCursor` and `#getAfterCursor` methods.
 *
 * @abstract
 * @extends EventEmitter
 */

var Editor = function (_EventEmitter) {
  _inherits(Editor, _EventEmitter);

  function Editor() {
    _classCallCheck(this, Editor);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Editor).apply(this, arguments));
  }

  _createClass(Editor, [{
    key: 'finalize',

    /**
     * @returns {this}
     */
    value: function finalize() {
      return this;
    }

    /**
     * It is called when a search result is selected by a user.
     *
     * @param {SearchResult} _searchResult
     */

  }, {
    key: 'applySearchResult',
    value: function applySearchResult(_searchResult) {
      throw new Error('Not implemented.');
    }

    /**
     * The input cursor's absolute coordinates from the window's left
     * top corner. It is intended to be overridden by sub classes.
     *
     * @type {Dropdown~Offset}
     */

  }, {
    key: 'getCursorOffset',
    value: function getCursorOffset() {
      throw new Error('Not implemented.');
    }

    /**
     * Editor string value from head to cursor.
     *
     * @private
     */

  }, {
    key: 'getBeforeCursor',
    value: function getBeforeCursor() {
      throw new Error('Not implemented.');
    }

    /**
     * Editor string value from cursor to tail.
     *
     * @private
     */

  }, {
    key: 'getAfterCursor',
    value: function getAfterCursor() {
      throw new Error('Not implemented.');
    }

    /**
     * @private
     * @fires Editor#move
     * @param {UP|DOWN} code
     * @returns {Editor#move}
     */

  }, {
    key: 'emitMoveEvent',
    value: function emitMoveEvent(code) {
      var moveEvent = (0, _utils.createCustomEvent)('move', {
        cancelable: true,
        detail: {
          code: code
        }
      });
      this.emit('move', moveEvent);
      return moveEvent;
    }

    /**
     * @private
     * @fires Editor#enter
     * @returns {Editor#enter}
     */

  }, {
    key: 'emitEnterEvent',
    value: function emitEnterEvent() {
      var enterEvent = (0, _utils.createCustomEvent)('enter', { cancelable: true });
      this.emit('enter', enterEvent);
      return enterEvent;
    }

    /**
     * @private
     * @fires Editor#change
     * @returns {Editor#change}
     */

  }, {
    key: 'emitChangeEvent',
    value: function emitChangeEvent() {
      var changeEvent = (0, _utils.createCustomEvent)('change', {
        detail: {
          beforeCursor: this.getBeforeCursor()
        }
      });
      this.emit('change', changeEvent);
      return changeEvent;
    }

    /**
     * @private
     * @fires Editor#esc
     * @returns {Editor#esc}
     */

  }, {
    key: 'emitEscEvent',
    value: function emitEscEvent() {
      var escEvent = (0, _utils.createCustomEvent)('esc', { cancelable: true });
      this.emit('esc', escEvent);
      return escEvent;
    }

    /**
     * @private
     * @param {KeyboardEvent} e
     * @returns {ENTER|UP|DOWN|OTHER|BS}
     */

  }, {
    key: 'getCode',
    value: function getCode(e) {
      return e.keyCode === 8 ? BS // backspace
      : e.keyCode === 9 ? ENTER // tab
      : e.keyCode === 13 ? ENTER // enter
      : e.keyCode === 27 ? ESC // esc
      : e.keyCode === 38 ? UP // up
      : e.keyCode === 40 ? DOWN // down
      : e.keyCode === 78 && e.ctrlKey ? DOWN // ctrl-n
      : e.keyCode === 80 && e.ctrlKey ? UP // ctrl-p
      : OTHER;
    }
  }]);

  return Editor;
}(_events.EventEmitter);

exports.default = Editor;